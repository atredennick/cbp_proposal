##
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: November 11, 2016
rm(list=ls(all.names = TRUE))
####
#### Parameters ----------------------------------------------------------------
####
sigE   <- c(0.05,0.5)
rho    <- c(0.5,-0.8,-0.5)
s      <- c(0.5, 0.5)
alpha  <- c(1,1)
lambda <- c(101,99)
nTime  <- 200
####
####  Libraries ----------------------------------------------------------------
####
library(mvtnorm)
library(plyr)
library(reshape2)
library(ggplot2)
library(ggthemes)
library(zoo)
####
####  Annual Plant Model Functions ---------------------------------------------
####
### Update seedbank function
updateN <- function(g, s, alpha, lambda, lastN){
newN <- numeric(2)
for(i in 1:2){
newN[i] <- lastN[i]*s[i]*(1-g[i]) + ((lambda[i]*g[i]*lastN[i]) / (1 + (alpha[i]*g[i]*lastN[i] + alpha[-i]*g[-i]*lastN[-i])))
if(newN[i] < 1) { newN[i] <- 0 }
}
return(newN)
}
### Get germination fractions function
getG <- function(sigE, rho, nTime){
varcov <- matrix(c(sigE, rho*sigE, rho*sigE, sigE), 2, 2)
e      <- rmvnorm(n = nTime, mean = c(0,0), sigma = varcov)
g      <- exp(e) / (1+exp(e))
return(g)
}
####
#### Simulations ---------------------------------------------------------------
####
png("../figures/sim_example.png", width = 5, height=3, units="in", res = 120)
par(mgp=c(2,0.45,0), tcl=-0.4, mar=c(3.3,3.6,1.1,1.1), las=1)
layout(matrix(c(1,2,3,4,4,4), 3, 2, byrow = FALSE))
### Low variability // competitive exclusion
gSeries <- getG(sigE[1], rho[2], nTime)
N       <- matrix(data = NA, nrow = nTime, ncol = 2)
N[1,]   <- c(100,20)
for(t in 2:nTime){
N[t,] <- updateN(g=gSeries[t,], s, alpha, lambda, lastN=N[t-1,])
}
matplot(c(1:nTime), N, type="l", lwd=1, bty="n", xlab="Time", col="black",
ylab="N", main="A) Competitive Exclusion", ylim=c(0,150))
totpop1 <- rowSums(N)
### High variability // coexistence
gSeries <- getG(sigE[2], rho[2], nTime)
N       <- matrix(data = NA, nrow = nTime, ncol = 2)
N[1,]   <- c(100,0)
for(t in 2:nTime){
N[t,] <- updateN(g=gSeries[t,], s, alpha, lambda, lastN=N[t-1,])
}
matplot(c(1:nTime), N, type="l", lwd=1, bty="n", xlab="Time",
col="blue",ylab="N", main="B) Coexistence Possible")
totpop2 <- rowSums(N)
### High variability // coexistence
gSeries <- getG(sigE[2], rho[2], nTime)
N       <- matrix(data = NA, nrow = nTime, ncol = 2)
N[1,]   <- c(100,100)
for(t in 2:nTime){
N[t,] <- updateN(g=gSeries[t,], s, alpha, lambda, lastN=N[t-1,])
}
matplot(c(1:nTime), N, type="l", lwd=1, bty="n", xlab="Time",
col="red", ylab="N", main="C) Species Coexistence", ylim=c(0,150))
totpop3 <- rowSums(N)
cv1 <- sd(totpop1)/mean(totpop1)
cv2 <- sd(totpop2)/mean(totpop2)
cv3 <- sd(totpop3)/mean(totpop3)
barplot(c(cv1, cv2, cv3), ylab="CV of Community Abundance", xlab="Environmental Variance",
ylim=c(0,0.1), col=c("grey45","blue","red"))
text(x=c(0.7, 1.9, 3.1), y=c(cv1, cv2, cv3)+0.005, labels = LETTERS[1:3])
axis(1, at=c(0.7, 1.9, 3.1), labels = c(expression(paste(sigma[E]^2, " = ", 0.05)),
expression(paste(sigma[E]^2, " = ", 0.5)),
expression(paste(sigma[E]^2, " = ", 0.5))))
dev.off()
### Plot the rolling CV
# mycv <- function(x) {sd(x) / mean(x)}
# rolling_cv <- data.frame(cv1 = rollapply(totpop1, width=10, FUN=mycv, fill=NA),
#                          cv2 = rollapply(totpop2, width=10, FUN=mycv, fill=NA),
#                          iteration = 1:length(totpop1))
# matplot(rolling_cv[,c(1:2)], type="l", col=c("grey45","steelblue"), bty="n")
setwd("~/Repos/coex-bef/code")
source('~/Repos/coex-bef/code/fit_pop_model.R', echo=TRUE)
install.packages("rjags")
install.packages("coda")
##  R script to fit an annual plant model to the winter annual plant
##  dataset from Larry Veneble, Tucsan, AZ
rm(list=ls(all.names = TRUE))
VERBOSE <- FALSE
####
####  Load Libraries -----------------------------------------------------------
####
library(ggplot2)
library(ggthemes)
library(plyr)
library(reshape2)
library(rjags)
library(coda)
# library(devtools)
# install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR)
install_github("atredennick/ecoforecastR")
install.packages("devtools")
library(devtools)
install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR)
####
####  Read In Winter Annual Datasets -------------------------------------------
####
plant_dat         <- read.csv("../data/species_x_year.csv", na.strings = ".")
plant_dat$species <- tolower(plant_dat$species)
dominant_species  <- c("erla", "erci", "erte", "evmu", "mobe", "pehe", "pere",
"plpa", "plin", "scba", "stmi", "vuoc")
dominant_data     <- subset(plant_dat, species %in% dominant_species)
fitting_dat       <- subset(dominant_data, species=="erla")
fitting_dat       <- subset(fitting_dat, is.na(seeds_per_m2)==FALSE)
####
####  JAGS State-Space Model ---------------------------------------------------
####
ann_pop_model <- "
model{
#### Variance Priors
tau_proc ~ dgamma(0.0001, 0.0001)
sigma_proc <- 1/sqrt(tau_proc)
tau_germ ~ dgamma(0.0001, 0.0001)
sigma_germ <- 1/sqrt(tau_germ)
sigma.o ~ dunif(1,1000)
#### Fixed Effects Priors
surv ~ dunif(0,1)
# lambda ~ dunif(0,100)
alpha ~ dunif(0,10)
for(t in 1:yrs){
germ[t] ~ dunif(0,1)
lambda[t] ~ dunif(0,100)
}
# germ ~ dunif(0,1)
#### Initial Conditions
N0 ~ dunif(1,10)
Nmed[1] <- log(max(1, (surv*(1-germ[1])*N0 + ((lambda[1]*germ[1]*N0) / (1+alpha*germ[1]*N0)) )))
N[1] ~ dlnorm(Nmed[1], tau_proc)
####  Process Model
for(t in 2:yrs){
Nmed[t] <- log(max(1, (surv*(1-germ[t])*N[t-1] + ((lambda[t]*germ[t]*N[t-1]) / (1+alpha*germ[t]*N[t-1]))  )))
N[t] ~ dlnorm(Nmed[t], tau_proc)
}
####  Data Model
var.o <- sigma.o*sigma.o
for(t in 1:yrs){
shape[t] <- N[t]*N[t]/var.o
rate[t] <- N[t]/var.o
lambda2[t] ~ dgamma(shape[t], rate[t])
Nobs[t] ~ dpois(lambda2[t])
}
}"
####
####  Fit Annual Plant State-Space Model ---------------------------------------
####
##  Prepare data list
mydat         <- list(Nobs = round(fitting_dat$seeds_per_m2)+1,
yrs = nrow(fitting_dat))
out_variables <- c("germ","surv","lambda","sigma_proc","N","alpha")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(ann_pop_model), data=mydat, n.chains=3)
mc3_out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=10000)
## Split output
out          <- list(params=NULL, predict=NULL, model=ann_pop_model, data=mydat)
mfit         <- as.matrix(mc3_out,chains=TRUE)
pred.cols    <- union(grep("N[",colnames(mfit),fixed=TRUE),grep("Nmed[",colnames(mfit),fixed=TRUE))
chain.col    <- which(colnames(mfit)=="CHAIN")
out$predict  <- mat2mcmc.list(mfit[,c(chain.col,pred.cols)])
out$params   <- mat2mcmc.list(mfit[,-pred.cols])
fitted_model <- out
## Collate predictions
predictions        <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df      <- data.frame(year = fitting_dat$year,
observation = fitting_dat$seeds_per_m2,
median_prediction = median_predictions,
upper_prediction = upper_predictions,
lower_prediction = lower_predictions)
if(VERBOSE){
plot(fitted_model$params)
gelman.diag(mc3_out)
heidel.diag(mc3_out)
}
####
####  Plot The Calibration Data And Predictions --------------------------------
####
pred_color <- "dodgerblue"
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_point(aes(y=observation), size=0.5)+
ylab("Number of Seeds")+
xlab("Year")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(linetype="dotted", color="grey65"))
mc3     <- jags.model(file=textConnection(ann_pop_model), data=mydat, n.chains=3)
library(rjags)
##  R script to fit an annual plant model to the winter annual plant
##  dataset from Larry Veneble, Tucsan, AZ
rm(list=ls(all.names = TRUE))
VERBOSE <- FALSE
####
####  Load Libraries -----------------------------------------------------------
####
library(ggplot2)
library(ggthemes)
library(plyr)
library(reshape2)
library(rjags)
library(coda)
setwd("~/Repos/coex-bef/code")
####
####  Read In Winter Annual Datasets -------------------------------------------
####
plant_dat         <- read.csv("../data/species_x_year.csv", na.strings = ".")
plant_dat$species <- tolower(plant_dat$species)
dominant_species  <- c("erla", "erci", "erte", "evmu", "mobe", "pehe", "pere",
"plpa", "plin", "scba", "stmi", "vuoc")
dominant_data     <- subset(plant_dat, species %in% dominant_species)
fitting_dat       <- subset(dominant_data, species=="erla")
fitting_dat       <- subset(fitting_dat, is.na(seeds_per_m2)==FALSE)
####
####  JAGS State-Space Model ---------------------------------------------------
####
ann_pop_model <- "
model{
#### Variance Priors
tau_proc ~ dgamma(0.0001, 0.0001)
sigma_proc <- 1/sqrt(tau_proc)
tau_germ ~ dgamma(0.0001, 0.0001)
sigma_germ <- 1/sqrt(tau_germ)
sigma.o ~ dunif(1,1000)
#### Fixed Effects Priors
surv ~ dunif(0,1)
# lambda ~ dunif(0,100)
alpha ~ dunif(0,10)
for(t in 1:yrs){
germ[t] ~ dunif(0,1)
lambda[t] ~ dunif(0,100)
}
# germ ~ dunif(0,1)
#### Initial Conditions
N0 ~ dunif(1,10)
Nmed[1] <- log(max(1, (surv*(1-germ[1])*N0 + ((lambda[1]*germ[1]*N0) / (1+alpha*germ[1]*N0)) )))
N[1] ~ dlnorm(Nmed[1], tau_proc)
####  Process Model
for(t in 2:yrs){
Nmed[t] <- log(max(1, (surv*(1-germ[t])*N[t-1] + ((lambda[t]*germ[t]*N[t-1]) / (1+alpha*germ[t]*N[t-1]))  )))
N[t] ~ dlnorm(Nmed[t], tau_proc)
}
####  Data Model
var.o <- sigma.o*sigma.o
for(t in 1:yrs){
shape[t] <- N[t]*N[t]/var.o
rate[t] <- N[t]/var.o
lambda2[t] ~ dgamma(shape[t], rate[t])
Nobs[t] ~ dpois(lambda2[t])
}
}"
####
####  Fit Annual Plant State-Space Model ---------------------------------------
####
##  Prepare data list
mydat         <- list(Nobs = round(fitting_dat$seeds_per_m2)+1,
yrs = nrow(fitting_dat))
out_variables <- c("germ","surv","lambda","sigma_proc","N","alpha")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(ann_pop_model), data=mydat, n.chains=3)
mc3_out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=10000)
## Split output
out          <- list(params=NULL, predict=NULL, model=ann_pop_model, data=mydat)
mfit         <- as.matrix(mc3_out,chains=TRUE)
pred.cols    <- union(grep("N[",colnames(mfit),fixed=TRUE),grep("Nmed[",colnames(mfit),fixed=TRUE))
chain.col    <- which(colnames(mfit)=="CHAIN")
out$predict  <- mat2mcmc.list(mfit[,c(chain.col,pred.cols)])
out$params   <- mat2mcmc.list(mfit[,-pred.cols])
fitted_model <- out
## Collate predictions
predictions        <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df      <- data.frame(year = fitting_dat$year,
observation = fitting_dat$seeds_per_m2,
median_prediction = median_predictions,
upper_prediction = upper_predictions,
lower_prediction = lower_predictions)
library(ecoforecastR)
library(devtools)
install_github("atredennick/ecoforecastR")
library(ecoforecastR)
##  R script to fit an annual plant model to the winter annual plant
##  dataset from Larry Veneble, Tucsan, AZ
rm(list=ls(all.names = TRUE))
VERBOSE <- FALSE
####
####  Load Libraries -----------------------------------------------------------
####
library(ggplot2)
library(ggthemes)
library(plyr)
library(reshape2)
library(rjags)
library(coda)
# library(devtools)
# install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR)
####
####  Read In Winter Annual Datasets -------------------------------------------
####
plant_dat         <- read.csv("../data/species_x_year.csv", na.strings = ".")
plant_dat$species <- tolower(plant_dat$species)
dominant_species  <- c("erla", "erci", "erte", "evmu", "mobe", "pehe", "pere",
"plpa", "plin", "scba", "stmi", "vuoc")
dominant_data     <- subset(plant_dat, species %in% dominant_species)
fitting_dat       <- subset(dominant_data, species=="erla")
fitting_dat       <- subset(fitting_dat, is.na(seeds_per_m2)==FALSE)
####
####  JAGS State-Space Model ---------------------------------------------------
####
ann_pop_model <- "
model{
#### Variance Priors
tau_proc ~ dgamma(0.0001, 0.0001)
sigma_proc <- 1/sqrt(tau_proc)
tau_germ ~ dgamma(0.0001, 0.0001)
sigma_germ <- 1/sqrt(tau_germ)
sigma.o ~ dunif(1,1000)
#### Fixed Effects Priors
surv ~ dunif(0,1)
# lambda ~ dunif(0,100)
alpha ~ dunif(0,10)
for(t in 1:yrs){
germ[t] ~ dunif(0,1)
lambda[t] ~ dunif(0,100)
}
# germ ~ dunif(0,1)
#### Initial Conditions
N0 ~ dunif(1,10)
Nmed[1] <- log(max(1, (surv*(1-germ[1])*N0 + ((lambda[1]*germ[1]*N0) / (1+alpha*germ[1]*N0)) )))
N[1] ~ dlnorm(Nmed[1], tau_proc)
####  Process Model
for(t in 2:yrs){
Nmed[t] <- log(max(1, (surv*(1-germ[t])*N[t-1] + ((lambda[t]*germ[t]*N[t-1]) / (1+alpha*germ[t]*N[t-1]))  )))
N[t] ~ dlnorm(Nmed[t], tau_proc)
}
####  Data Model
var.o <- sigma.o*sigma.o
for(t in 1:yrs){
shape[t] <- N[t]*N[t]/var.o
rate[t] <- N[t]/var.o
lambda2[t] ~ dgamma(shape[t], rate[t])
Nobs[t] ~ dpois(lambda2[t])
}
}"
####
####  Fit Annual Plant State-Space Model ---------------------------------------
####
##  Prepare data list
mydat         <- list(Nobs = round(fitting_dat$seeds_per_m2)+1,
yrs = nrow(fitting_dat))
out_variables <- c("germ","surv","lambda","sigma_proc","N","alpha")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(ann_pop_model), data=mydat, n.chains=3)
mc3_out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=10000)
## Split output
out          <- list(params=NULL, predict=NULL, model=ann_pop_model, data=mydat)
mfit         <- as.matrix(mc3_out,chains=TRUE)
pred.cols    <- union(grep("N[",colnames(mfit),fixed=TRUE),grep("Nmed[",colnames(mfit),fixed=TRUE))
chain.col    <- which(colnames(mfit)=="CHAIN")
out$predict  <- mat2mcmc.list(mfit[,c(chain.col,pred.cols)])
out$params   <- mat2mcmc.list(mfit[,-pred.cols])
fitted_model <- out
## Collate predictions
predictions        <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df      <- data.frame(year = fitting_dat$year,
observation = fitting_dat$seeds_per_m2,
median_prediction = median_predictions,
upper_prediction = upper_predictions,
lower_prediction = lower_predictions)
if(VERBOSE){
plot(fitted_model$params)
gelman.diag(mc3_out)
heidel.diag(mc3_out)
}
####
####  Plot The Calibration Data And Predictions --------------------------------
####
pred_color <- "dodgerblue"
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_point(aes(y=observation), size=0.5)+
ylab("Number of Seeds")+
xlab("Year")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(linetype="dotted", color="grey65"))
source('~/Repos/coex-bef/code/wintann_pop_model.R', echo=TRUE)
#################################################################
##  explore_wintann_data.R: R script to explore Sonoran Desert ##
##  winter annual demographic dataset                          ##
#################################################################
# Clear the workspace
rm(list=ls(all.names = TRUE))
# Load some libraries
library(plyr)
library(reshape2)
library(ggthemes)
library(ggplot2)
####
####  LOAD SEED BANK DATA
####
seed_bank <- read.csv("../data/Seed_Bank.csv")
seed_bank <- subset(seed_bank, viable.seeds!=-99)
seed_bank$species <- tolower(seed_bank$species)
# Summarise data by species and year
avg_seed_bank <- ddply(seed_bank, .(year, species), summarise,
viable_seeds = mean(viable.seeds))
ggplot(avg_seed_bank, aes(x=year, y=viable_seeds, color=species))+
geom_line()
# Plot time series for abundant species from Gremer and Venable
gremer_species <- c("erla", "erci", "erte", "evmu", "mobe", "pehe", "pere",
"plpa", "plin", "scba", "stmi", "vuoc")
abundant_seeds <- avg_seed_bank[which(avg_seed_bank$species %in% gremer_species),]
ggplot(abundant_seeds, aes(x=year, y=viable_seeds, color=species))+
geom_line(alpha=0.5)+
geom_point()
#################################################################
##  explore_wintann_data.R: R script to explore Sonoran Desert ##
##  winter annual demographic dataset                          ##
#################################################################
# Clear the workspace
rm(list=ls(all.names = TRUE))
# Load some libraries
library(plyr)
library(reshape2)
library(ggthemes)
library(ggplot2)
####
####  LOAD SEED BANK DATA
####
seed_bank <- read.csv("../data/Seed_Bank.csv")
seed_bank <- subset(seed_bank, viable.seeds!=-99)
seed_bank$species <- tolower(seed_bank$species)
# Summarise data by species and year
avg_seed_bank <- ddply(seed_bank, .(year, species), summarise,
viable_seeds = mean(viable.seeds))
ggplot(avg_seed_bank, aes(x=year, y=viable_seeds, color=species))+
geom_line()
# Plot time series for abundant species from Gremer and Venable
gremer_species <- c("erla", "erci", "erte", "evmu", "mobe", "pehe", "pere",
"plpa", "plin", "scba", "stmi", "vuoc")
abundant_seeds <- avg_seed_bank[which(avg_seed_bank$species %in% gremer_species),]
ggplot(abundant_seeds, aes(x=year, y=viable_seeds, color=species))+
geom_line(alpha=0.5)+
geom_point()
####
####  LOAD INDIVIDUAL CENSUS DATA
####
census_data <- read.csv("../data/census_data.csv")
census_data$species <- tolower(census_data$species)
# Summarise data to get average abundance per year
abund_per_plot <- ddply(census_data, .(Year, plot.habitat.replicate, species), summarise,
abundance = length(which(seeds!=-99)))
avg_abundance <- ddply(abund_per_plot, .(Year, species), summarise,
mean_abundance = mean(abundance))
# Plot abundant species only
abundant_abundance <- avg_abundance[which(avg_abundance$species %in% gremer_species),]
total_abundance <- ddply(abundant_abundance, .(Year), summarise,
abundance = sum(mean_abundance))
cv_abundance <- sd(total_abundance$abundance) / mean(total_abundance$abundance)
ggplot(abundant_abundance, aes(x=Year, y=mean_abundance, color=species))+
geom_line(alpha=0.5)+
geom_point()+
geom_line(data=total_abundance, aes(x=Year, y=abundance), color="black", size=1, alpha=0.5)+
geom_point(data=total_abundance, aes(x=Year, y=abundance), color="black", size=3)+
scale_x_continuous(breaks=unique(abundant_abundance$Year))+
ylab("Average Seedling Abundance")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
guides(color=FALSE)
